// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use WebPage;
use ffi;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_ffi;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct WebExtension(Object<ffi::WebKitWebExtension, ffi::WebKitWebExtensionClass, WebExtensionClass>);

    match fn {
        get_type => || ffi::webkit_web_extension_get_type(),
    }
}

pub const NONE_WEB_EXTENSION: Option<&WebExtension> = None;

pub trait WebExtensionExt: 'static {
    fn get_page(&self, page_id: u64) -> Option<WebPage>;

    fn connect_page_created<F: Fn(&Self, &WebPage) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<WebExtension>> WebExtensionExt for O {
    fn get_page(&self, page_id: u64) -> Option<WebPage> {
        unsafe {
            from_glib_none(ffi::webkit_web_extension_get_page(self.as_ref().to_glib_none().0, page_id))
        }
    }

    fn connect_page_created<F: Fn(&Self, &WebPage) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self, &WebPage) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(self.as_ptr() as *mut _, b"page-created\0".as_ptr() as *const _,
                transmute(page_created_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn page_created_trampoline<P>(this: *mut ffi::WebKitWebExtension, web_page: *mut ffi::WebKitWebPage, f: glib_ffi::gpointer)
where P: IsA<WebExtension> {
    let f: &&(Fn(&P, &WebPage) + 'static) = transmute(f);
    f(&WebExtension::from_glib_borrow(this).unsafe_cast(), &from_glib_borrow(web_page))
}

impl fmt::Display for WebExtension {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "WebExtension")
    }
}
