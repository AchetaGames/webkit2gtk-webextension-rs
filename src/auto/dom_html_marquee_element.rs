// This file was generated by gir (24767f3+) from gir-files (???)
// DO NOT EDIT

use DOMElement;
use DOMEventTarget;
use DOMHTMLElement;
use DOMNode;
use DOMObject;
use ffi;
use glib::Value;
use glib::translate::*;
use gobject_ffi;
use libc;

glib_wrapper! {
    pub struct DOMHTMLMarqueeElement(Object<ffi::WebKitDOMHTMLMarqueeElement>): DOMHTMLElement, DOMElement, DOMNode, DOMObject, DOMEventTarget;

    match fn {
        get_type => || ffi::webkit_dom_html_marquee_element_get_type(),
    }
}

impl DOMHTMLMarqueeElement {
    pub fn start(&self) {
        unsafe {
            ffi::webkit_dom_html_marquee_element_start(self.to_glib_none().0);
        }
    }

    pub fn stop(&self) {
        unsafe {
            ffi::webkit_dom_html_marquee_element_stop(self.to_glib_none().0);
        }
    }

    pub fn get_property_behavior(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "behavior".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn set_property_behavior(&self, behavior: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "behavior".to_glib_none().0, Value::from(behavior).to_glib_none().0);
        }
    }

    pub fn get_property_bg_color(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "bg-color".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn set_property_bg_color(&self, bg_color: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "bg-color".to_glib_none().0, Value::from(bg_color).to_glib_none().0);
        }
    }

    pub fn get_property_direction(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "direction".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn set_property_direction(&self, direction: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "direction".to_glib_none().0, Value::from(direction).to_glib_none().0);
        }
    }

    pub fn get_property_height(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "height".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn set_property_height(&self, height: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "height".to_glib_none().0, Value::from(height).to_glib_none().0);
        }
    }

    pub fn set_property_hspace(&self, hspace: libc::c_ulong) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "hspace".to_glib_none().0, Value::from(&hspace).to_glib_none().0);
        }
    }

    pub fn set_property_loop(&self, loop_: libc::c_long) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "loop".to_glib_none().0, Value::from(&loop_).to_glib_none().0);
        }
    }

    pub fn set_property_scroll_amount(&self, scroll_amount: libc::c_long) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "scroll-amount".to_glib_none().0, Value::from(&scroll_amount).to_glib_none().0);
        }
    }

    pub fn set_property_scroll_delay(&self, scroll_delay: libc::c_long) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "scroll-delay".to_glib_none().0, Value::from(&scroll_delay).to_glib_none().0);
        }
    }

    pub fn get_property_true_speed(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "true-speed".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    pub fn set_property_true_speed(&self, true_speed: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "true-speed".to_glib_none().0, Value::from(&true_speed).to_glib_none().0);
        }
    }

    pub fn set_property_vspace(&self, vspace: libc::c_ulong) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "vspace".to_glib_none().0, Value::from(&vspace).to_glib_none().0);
        }
    }

    pub fn get_property_width(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "width".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn set_property_width(&self, width: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "width".to_glib_none().0, Value::from(width).to_glib_none().0);
        }
    }
}
