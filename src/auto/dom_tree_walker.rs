// This file was generated by gir (074a1ca+) from gir-files (???)
// DO NOT EDIT

use DOMNode;
use DOMObject;
use ffi;
use glib::translate::*;

glib_wrapper! {
    pub struct DOMTreeWalker(Object<ffi::WebKitDOMTreeWalker>): DOMObject;

    match fn {
        get_type => || ffi::webkit_dom_tree_walker_get_type(),
    }
}

impl DOMTreeWalker {
    pub fn first_child(&self) -> Option<DOMNode> {
        unsafe {
            from_glib_none(ffi::webkit_dom_tree_walker_first_child(self.to_glib_none().0))
        }
    }

    pub fn get_current_node(&self) -> Option<DOMNode> {
        unsafe {
            from_glib_none(ffi::webkit_dom_tree_walker_get_current_node(self.to_glib_none().0))
        }
    }

    pub fn get_expand_entity_references(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_tree_walker_get_expand_entity_references(self.to_glib_none().0))
        }
    }

    //pub fn get_filter(&self) -> /*Ignored*/Option<DOMNodeFilter> {
    //    unsafe { TODO: call ffi::webkit_dom_tree_walker_get_filter() }
    //}

    pub fn get_root(&self) -> Option<DOMNode> {
        unsafe {
            from_glib_none(ffi::webkit_dom_tree_walker_get_root(self.to_glib_none().0))
        }
    }

    pub fn get_what_to_show(&self) -> u64 {
        unsafe {
            ffi::webkit_dom_tree_walker_get_what_to_show(self.to_glib_none().0)
        }
    }

    pub fn last_child(&self) -> Option<DOMNode> {
        unsafe {
            from_glib_none(ffi::webkit_dom_tree_walker_last_child(self.to_glib_none().0))
        }
    }

    pub fn next_node(&self) -> Option<DOMNode> {
        unsafe {
            from_glib_none(ffi::webkit_dom_tree_walker_next_node(self.to_glib_none().0))
        }
    }

    pub fn next_sibling(&self) -> Option<DOMNode> {
        unsafe {
            from_glib_none(ffi::webkit_dom_tree_walker_next_sibling(self.to_glib_none().0))
        }
    }

    pub fn parent_node(&self) -> Option<DOMNode> {
        unsafe {
            from_glib_none(ffi::webkit_dom_tree_walker_parent_node(self.to_glib_none().0))
        }
    }

    pub fn previous_node(&self) -> Option<DOMNode> {
        unsafe {
            from_glib_none(ffi::webkit_dom_tree_walker_previous_node(self.to_glib_none().0))
        }
    }

    pub fn previous_sibling(&self) -> Option<DOMNode> {
        unsafe {
            from_glib_none(ffi::webkit_dom_tree_walker_previous_sibling(self.to_glib_none().0))
        }
    }

    //pub fn set_current_node<T: IsA<DOMNode>>(&self, value: &T, error: /*Ignored*/Option<Error>) {
    //    unsafe { TODO: call ffi::webkit_dom_tree_walker_set_current_node() }
    //}
}
