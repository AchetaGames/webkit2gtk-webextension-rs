// This file was generated by gir (074a1ca) from gir-files (???)
// DO NOT EDIT

use ffi;
use glib::translate::*;

glib_wrapper! {
    pub struct DOMEvent(Object<ffi::WebKitDOMEvent>);

    match fn {
        get_type => || ffi::webkit_dom_event_get_type(),
    }
}

impl DOMEvent {
    pub fn get_bubbles(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_event_get_bubbles(self.to_glib_none().0))
        }
    }

    pub fn get_cancel_bubble(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_event_get_cancel_bubble(self.to_glib_none().0))
        }
    }

    pub fn get_cancelable(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_event_get_cancelable(self.to_glib_none().0))
        }
    }

    //pub fn get_current_target(&self) -> /*Ignored*/Option<DOMEventTarget> {
    //    unsafe { TODO: call ffi::webkit_dom_event_get_current_target() }
    //}

    //pub fn get_event_phase(&self) -> /*Unimplemented*/Fundamental: UShort {
    //    unsafe { TODO: call ffi::webkit_dom_event_get_event_phase() }
    //}

    pub fn get_event_type(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_event_get_event_type(self.to_glib_none().0))
        }
    }

    pub fn get_return_value(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_event_get_return_value(self.to_glib_none().0))
        }
    }

    //pub fn get_src_element(&self) -> /*Ignored*/Option<DOMEventTarget> {
    //    unsafe { TODO: call ffi::webkit_dom_event_get_src_element() }
    //}

    //pub fn get_target(&self) -> /*Ignored*/Option<DOMEventTarget> {
    //    unsafe { TODO: call ffi::webkit_dom_event_get_target() }
    //}

    pub fn get_time_stamp(&self) -> u32 {
        unsafe {
            ffi::webkit_dom_event_get_time_stamp(self.to_glib_none().0)
        }
    }

    pub fn init_event(&self, eventTypeArg: &str, canBubbleArg: bool, cancelableArg: bool) {
        unsafe {
            ffi::webkit_dom_event_init_event(self.to_glib_none().0, eventTypeArg.to_glib_none().0, canBubbleArg.to_glib(), cancelableArg.to_glib());
        }
    }

    pub fn prevent_default(&self) {
        unsafe {
            ffi::webkit_dom_event_prevent_default(self.to_glib_none().0);
        }
    }

    pub fn set_cancel_bubble(&self, value: bool) {
        unsafe {
            ffi::webkit_dom_event_set_cancel_bubble(self.to_glib_none().0, value.to_glib());
        }
    }

    pub fn set_return_value(&self, value: bool) {
        unsafe {
            ffi::webkit_dom_event_set_return_value(self.to_glib_none().0, value.to_glib());
        }
    }

    pub fn stop_propagation(&self) {
        unsafe {
            ffi::webkit_dom_event_stop_propagation(self.to_glib_none().0);
        }
    }
}
