// This file was generated by gir (24767f3+) from gir-files (???)
// DO NOT EDIT

use DOMElement;
use DOMEventTarget;
use DOMHTMLCollection;
use DOMNode;
use DOMObject;
use ffi;
use glib::Value;
use glib::translate::*;
use gobject_ffi;

glib_wrapper! {
    pub struct DOMDocumentFragment(Object<ffi::WebKitDOMDocumentFragment>): DOMNode, DOMObject, DOMEventTarget;

    match fn {
        get_type => || ffi::webkit_dom_document_fragment_get_type(),
    }
}

impl DOMDocumentFragment {
    pub fn get_property_children(&self) -> Option<DOMHTMLCollection> {
        let mut value = Value::from(None::<&DOMHTMLCollection>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "children".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn get_property_first_element_child(&self) -> Option<DOMElement> {
        let mut value = Value::from(None::<&DOMElement>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "first-element-child".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn get_property_last_element_child(&self) -> Option<DOMElement> {
        let mut value = Value::from(None::<&DOMElement>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "last-element-child".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }
}
