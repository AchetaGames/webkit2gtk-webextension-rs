// This file was generated by gir (24767f3+) from gir-files (???)
// DO NOT EDIT

use DOMElement;
use DOMEventTarget;
use DOMHTMLElement;
use DOMNode;
use DOMObject;
use ffi;
use glib::Value;
use glib::translate::*;
use gobject_ffi;
use libc;

glib_wrapper! {
    pub struct DOMHTMLOListElement(Object<ffi::WebKitDOMHTMLOListElement>): DOMHTMLElement, DOMElement, DOMNode, DOMObject, DOMEventTarget;

    match fn {
        get_type => || ffi::webkit_dom_html_o_list_element_get_type(),
    }
}

impl DOMHTMLOListElement {
    pub fn get_compact(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_html_o_list_element_get_compact(self.to_glib_none().0))
        }
    }

    pub fn get_start(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_html_o_list_element_get_start(self.to_glib_none().0)
        }
    }

    pub fn get_type_attr(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_o_list_element_get_type_attr(self.to_glib_none().0))
        }
    }

    pub fn set_compact(&self, value: bool) {
        unsafe {
            ffi::webkit_dom_html_o_list_element_set_compact(self.to_glib_none().0, value.to_glib());
        }
    }

    pub fn set_start(&self, value: libc::c_long) {
        unsafe {
            ffi::webkit_dom_html_o_list_element_set_start(self.to_glib_none().0, value);
        }
    }

    pub fn set_type_attr(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_o_list_element_set_type_attr(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    pub fn get_property_reversed(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "reversed".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    pub fn set_property_reversed(&self, reversed: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "reversed".to_glib_none().0, Value::from(&reversed).to_glib_none().0);
        }
    }

    pub fn get_property_type(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "type".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn set_property_type(&self, type_: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "type".to_glib_none().0, Value::from(type_).to_glib_none().0);
        }
    }
}
