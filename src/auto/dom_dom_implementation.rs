// This file was generated by gir (074a1ca) from gir-files (???)
// DO NOT EDIT

use ffi;
use glib::translate::*;

glib_wrapper! {
    pub struct DOMDOMImplementation(Object<ffi::WebKitDOMDOMImplementation>);

    match fn {
        get_type => || ffi::webkit_dom_dom_implementation_get_type(),
    }
}

impl DOMDOMImplementation {
    //pub fn create_css_style_sheet(&self, title: &str, media: &str, error: /*Ignored*/Option<Error>) -> /*Ignored*/Option<DOMCSSStyleSheet> {
    //    unsafe { TODO: call ffi::webkit_dom_dom_implementation_create_css_style_sheet() }
    //}

    //pub fn create_document(&self, namespaceURI: Option<&str>, qualifiedName: &str, doctype: Option<&DOMDocumentType>, error: /*Ignored*/Option<Error>) -> Option<DOMDocument> {
    //    unsafe { TODO: call ffi::webkit_dom_dom_implementation_create_document() }
    //}

    //pub fn create_document_type(&self, qualifiedName: &str, publicId: &str, systemId: &str, error: /*Ignored*/Option<Error>) -> Option<DOMDocumentType> {
    //    unsafe { TODO: call ffi::webkit_dom_dom_implementation_create_document_type() }
    //}

    //pub fn create_html_document(&self, title: &str) -> /*Ignored*/Option<DOMHTMLDocument> {
    //    unsafe { TODO: call ffi::webkit_dom_dom_implementation_create_html_document() }
    //}

    pub fn has_feature(&self, feature: &str, version: &str) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_dom_implementation_has_feature(self.to_glib_none().0, feature.to_glib_none().0, version.to_glib_none().0))
        }
    }
}
