// This file was generated by gir (074a1ca+) from gir-files (???)
// DO NOT EDIT

use DOMObject;
use ffi;
use glib::translate::*;
use std::fmt;

glib_wrapper! {
    pub struct DOMRange(Object<ffi::WebKitDOMRange>): DOMObject;

    match fn {
        get_type => || ffi::webkit_dom_range_get_type(),
    }
}

impl DOMRange {
    //pub fn clone_contents(&self, error: /*Ignored*/Option<Error>) -> Option<DOMDocumentFragment> {
    //    unsafe { TODO: call ffi::webkit_dom_range_clone_contents() }
    //}

    //pub fn clone_range(&self, error: /*Ignored*/Option<Error>) -> Option<DOMRange> {
    //    unsafe { TODO: call ffi::webkit_dom_range_clone_range() }
    //}

    //pub fn collapse(&self, toStart: bool, error: /*Ignored*/Option<Error>) {
    //    unsafe { TODO: call ffi::webkit_dom_range_collapse() }
    //}

    //pub fn compare_boundary_points(&self, how: /*Unimplemented*/Fundamental: UShort, sourceRange: &DOMRange, error: /*Ignored*/Option<Error>) -> /*Unimplemented*/Fundamental: Short {
    //    unsafe { TODO: call ffi::webkit_dom_range_compare_boundary_points() }
    //}

    //pub fn compare_node<T: IsA<DOMNode>>(&self, refNode: &T, error: /*Ignored*/Option<Error>) -> /*Unimplemented*/Fundamental: Short {
    //    unsafe { TODO: call ffi::webkit_dom_range_compare_node() }
    //}

    //pub fn compare_point<T: IsA<DOMNode>>(&self, refNode: &T, offset: i64, error: /*Ignored*/Option<Error>) -> /*Unimplemented*/Fundamental: Short {
    //    unsafe { TODO: call ffi::webkit_dom_range_compare_point() }
    //}

    //pub fn create_contextual_fragment(&self, html: &str, error: /*Ignored*/Option<Error>) -> Option<DOMDocumentFragment> {
    //    unsafe { TODO: call ffi::webkit_dom_range_create_contextual_fragment() }
    //}

    //pub fn delete_contents(&self, error: /*Ignored*/Option<Error>) {
    //    unsafe { TODO: call ffi::webkit_dom_range_delete_contents() }
    //}

    //pub fn detach(&self, error: /*Ignored*/Option<Error>) {
    //    unsafe { TODO: call ffi::webkit_dom_range_detach() }
    //}

    //pub fn extract_contents(&self, error: /*Ignored*/Option<Error>) -> Option<DOMDocumentFragment> {
    //    unsafe { TODO: call ffi::webkit_dom_range_extract_contents() }
    //}

    //pub fn get_collapsed(&self, error: /*Ignored*/Option<Error>) -> bool {
    //    unsafe { TODO: call ffi::webkit_dom_range_get_collapsed() }
    //}

    //pub fn get_common_ancestor_container(&self, error: /*Ignored*/Option<Error>) -> Option<DOMNode> {
    //    unsafe { TODO: call ffi::webkit_dom_range_get_common_ancestor_container() }
    //}

    //pub fn get_end_container(&self, error: /*Ignored*/Option<Error>) -> Option<DOMNode> {
    //    unsafe { TODO: call ffi::webkit_dom_range_get_end_container() }
    //}

    //pub fn get_end_offset(&self, error: /*Ignored*/Option<Error>) -> i64 {
    //    unsafe { TODO: call ffi::webkit_dom_range_get_end_offset() }
    //}

    //pub fn get_start_container(&self, error: /*Ignored*/Option<Error>) -> Option<DOMNode> {
    //    unsafe { TODO: call ffi::webkit_dom_range_get_start_container() }
    //}

    //pub fn get_start_offset(&self, error: /*Ignored*/Option<Error>) -> i64 {
    //    unsafe { TODO: call ffi::webkit_dom_range_get_start_offset() }
    //}

    pub fn get_text(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_range_get_text(self.to_glib_none().0))
        }
    }

    //pub fn insert_node<T: IsA<DOMNode>>(&self, newNode: &T, error: /*Ignored*/Option<Error>) {
    //    unsafe { TODO: call ffi::webkit_dom_range_insert_node() }
    //}

    //pub fn intersects_node<T: IsA<DOMNode>>(&self, refNode: &T, error: /*Ignored*/Option<Error>) -> bool {
    //    unsafe { TODO: call ffi::webkit_dom_range_intersects_node() }
    //}

    //pub fn is_point_in_range<T: IsA<DOMNode>>(&self, refNode: &T, offset: i64, error: /*Ignored*/Option<Error>) -> bool {
    //    unsafe { TODO: call ffi::webkit_dom_range_is_point_in_range() }
    //}

    //pub fn select_node<T: IsA<DOMNode>>(&self, refNode: &T, error: /*Ignored*/Option<Error>) {
    //    unsafe { TODO: call ffi::webkit_dom_range_select_node() }
    //}

    //pub fn select_node_contents<T: IsA<DOMNode>>(&self, refNode: &T, error: /*Ignored*/Option<Error>) {
    //    unsafe { TODO: call ffi::webkit_dom_range_select_node_contents() }
    //}

    //pub fn set_end<T: IsA<DOMNode>>(&self, refNode: &T, offset: i64, error: /*Ignored*/Option<Error>) {
    //    unsafe { TODO: call ffi::webkit_dom_range_set_end() }
    //}

    //pub fn set_end_after<T: IsA<DOMNode>>(&self, refNode: &T, error: /*Ignored*/Option<Error>) {
    //    unsafe { TODO: call ffi::webkit_dom_range_set_end_after() }
    //}

    //pub fn set_end_before<T: IsA<DOMNode>>(&self, refNode: &T, error: /*Ignored*/Option<Error>) {
    //    unsafe { TODO: call ffi::webkit_dom_range_set_end_before() }
    //}

    //pub fn set_start<T: IsA<DOMNode>>(&self, refNode: &T, offset: i64, error: /*Ignored*/Option<Error>) {
    //    unsafe { TODO: call ffi::webkit_dom_range_set_start() }
    //}

    //pub fn set_start_after<T: IsA<DOMNode>>(&self, refNode: &T, error: /*Ignored*/Option<Error>) {
    //    unsafe { TODO: call ffi::webkit_dom_range_set_start_after() }
    //}

    //pub fn set_start_before<T: IsA<DOMNode>>(&self, refNode: &T, error: /*Ignored*/Option<Error>) {
    //    unsafe { TODO: call ffi::webkit_dom_range_set_start_before() }
    //}

    //pub fn surround_contents<T: IsA<DOMNode>>(&self, newParent: &T, error: /*Ignored*/Option<Error>) {
    //    unsafe { TODO: call ffi::webkit_dom_range_surround_contents() }
    //}

    //pub fn to_string(&self, error: /*Ignored*/Option<Error>) -> String {
    //    unsafe { TODO: call ffi::webkit_dom_range_to_string() }
    //}
}

impl fmt::Display for DOMRange {
    #[inline]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.to_string())
    }
}
