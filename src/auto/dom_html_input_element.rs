// This file was generated by gir (24767f3+) from gir-files (???)
// DO NOT EDIT

use DOMElement;
use DOMEventTarget;
use DOMFileList;
use DOMHTMLElement;
use DOMHTMLFormElement;
use DOMNode;
use DOMNodeList;
use DOMObject;
use Error;
use ffi;
use glib::Value;
use glib::translate::*;
use gobject_ffi;
use libc;
use std::ptr;

glib_wrapper! {
    pub struct DOMHTMLInputElement(Object<ffi::WebKitDOMHTMLInputElement>): DOMHTMLElement, DOMElement, DOMNode, DOMObject, DOMEventTarget;

    match fn {
        get_type => || ffi::webkit_dom_html_input_element_get_type(),
    }
}

impl DOMHTMLInputElement {
    pub fn get_accept(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_input_element_get_accept(self.to_glib_none().0))
        }
    }

    pub fn get_align(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_input_element_get_align(self.to_glib_none().0))
        }
    }

    pub fn get_alt(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_input_element_get_alt(self.to_glib_none().0))
        }
    }

    pub fn get_autofocus(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_html_input_element_get_autofocus(self.to_glib_none().0))
        }
    }

    pub fn get_capture(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_html_input_element_get_capture(self.to_glib_none().0))
        }
    }

    pub fn get_checked(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_html_input_element_get_checked(self.to_glib_none().0))
        }
    }

    pub fn get_default_checked(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_html_input_element_get_default_checked(self.to_glib_none().0))
        }
    }

    pub fn get_default_value(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_input_element_get_default_value(self.to_glib_none().0))
        }
    }

    pub fn get_disabled(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_html_input_element_get_disabled(self.to_glib_none().0))
        }
    }

    pub fn get_files(&self) -> Option<DOMFileList> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_input_element_get_files(self.to_glib_none().0))
        }
    }

    pub fn get_form(&self) -> Option<DOMHTMLFormElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_html_input_element_get_form(self.to_glib_none().0))
        }
    }

    pub fn get_height(&self) -> libc::c_ulong {
        unsafe {
            ffi::webkit_dom_html_input_element_get_height(self.to_glib_none().0)
        }
    }

    pub fn get_indeterminate(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_html_input_element_get_indeterminate(self.to_glib_none().0))
        }
    }

    pub fn get_input_type(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_input_element_get_input_type(self.to_glib_none().0))
        }
    }

    pub fn get_max_length(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_html_input_element_get_max_length(self.to_glib_none().0)
        }
    }

    pub fn get_multiple(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_html_input_element_get_multiple(self.to_glib_none().0))
        }
    }

    pub fn get_name(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_input_element_get_name(self.to_glib_none().0))
        }
    }

    pub fn get_size(&self) -> libc::c_ulong {
        unsafe {
            ffi::webkit_dom_html_input_element_get_size(self.to_glib_none().0)
        }
    }

    pub fn get_src(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_input_element_get_src(self.to_glib_none().0))
        }
    }

    pub fn get_use_map(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_input_element_get_use_map(self.to_glib_none().0))
        }
    }

    pub fn get_value(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_input_element_get_value(self.to_glib_none().0))
        }
    }

    pub fn get_width(&self) -> libc::c_ulong {
        unsafe {
            ffi::webkit_dom_html_input_element_get_width(self.to_glib_none().0)
        }
    }

    pub fn get_will_validate(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_html_input_element_get_will_validate(self.to_glib_none().0))
        }
    }

    pub fn is_edited(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_html_input_element_is_edited(self.to_glib_none().0))
        }
    }

    pub fn select(&self) {
        unsafe {
            ffi::webkit_dom_html_input_element_select(self.to_glib_none().0);
        }
    }

    pub fn set_accept(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_input_element_set_accept(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    pub fn set_align(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_input_element_set_align(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    pub fn set_alt(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_input_element_set_alt(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    pub fn set_autofocus(&self, value: bool) {
        unsafe {
            ffi::webkit_dom_html_input_element_set_autofocus(self.to_glib_none().0, value.to_glib());
        }
    }

    pub fn set_checked(&self, value: bool) {
        unsafe {
            ffi::webkit_dom_html_input_element_set_checked(self.to_glib_none().0, value.to_glib());
        }
    }

    pub fn set_default_value(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_input_element_set_default_value(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    pub fn set_disabled(&self, value: bool) {
        unsafe {
            ffi::webkit_dom_html_input_element_set_disabled(self.to_glib_none().0, value.to_glib());
        }
    }

    pub fn set_files(&self, value: &DOMFileList) {
        unsafe {
            ffi::webkit_dom_html_input_element_set_files(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    pub fn set_height(&self, value: libc::c_ulong) {
        unsafe {
            ffi::webkit_dom_html_input_element_set_height(self.to_glib_none().0, value);
        }
    }

    pub fn set_indeterminate(&self, value: bool) {
        unsafe {
            ffi::webkit_dom_html_input_element_set_indeterminate(self.to_glib_none().0, value.to_glib());
        }
    }

    pub fn set_input_type(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_input_element_set_input_type(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    pub fn set_max_length(&self, value: libc::c_long) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::webkit_dom_html_input_element_set_max_length(self.to_glib_none().0, value, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    pub fn set_multiple(&self, value: bool) {
        unsafe {
            ffi::webkit_dom_html_input_element_set_multiple(self.to_glib_none().0, value.to_glib());
        }
    }

    pub fn set_name(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_input_element_set_name(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    pub fn set_read_only(&self, value: bool) {
        unsafe {
            ffi::webkit_dom_html_input_element_set_read_only(self.to_glib_none().0, value.to_glib());
        }
    }

    pub fn set_size(&self, value: libc::c_ulong) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::webkit_dom_html_input_element_set_size(self.to_glib_none().0, value, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    pub fn set_src(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_input_element_set_src(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    pub fn set_use_map(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_input_element_set_use_map(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    pub fn set_value(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_input_element_set_value(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    pub fn set_width(&self, value: libc::c_ulong) {
        unsafe {
            ffi::webkit_dom_html_input_element_set_width(self.to_glib_none().0, value);
        }
    }

    pub fn get_property_autocapitalize(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "autocapitalize".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn set_property_autocapitalize(&self, autocapitalize: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "autocapitalize".to_glib_none().0, Value::from(autocapitalize).to_glib_none().0);
        }
    }

    pub fn get_property_autocomplete(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "autocomplete".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn set_property_autocomplete(&self, autocomplete: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "autocomplete".to_glib_none().0, Value::from(autocomplete).to_glib_none().0);
        }
    }

    pub fn get_property_autocorrect(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "autocorrect".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    pub fn set_property_autocorrect(&self, autocorrect: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "autocorrect".to_glib_none().0, Value::from(&autocorrect).to_glib_none().0);
        }
    }

    pub fn set_property_capture(&self, capture: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "capture".to_glib_none().0, Value::from(&capture).to_glib_none().0);
        }
    }

    pub fn set_property_default_checked(&self, default_checked: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "default-checked".to_glib_none().0, Value::from(&default_checked).to_glib_none().0);
        }
    }

    pub fn get_property_dir_name(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "dir-name".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn set_property_dir_name(&self, dir_name: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "dir-name".to_glib_none().0, Value::from(dir_name).to_glib_none().0);
        }
    }

    pub fn get_property_form_action(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "form-action".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn set_property_form_action(&self, form_action: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "form-action".to_glib_none().0, Value::from(form_action).to_glib_none().0);
        }
    }

    pub fn get_property_form_enctype(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "form-enctype".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn set_property_form_enctype(&self, form_enctype: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "form-enctype".to_glib_none().0, Value::from(form_enctype).to_glib_none().0);
        }
    }

    pub fn get_property_form_method(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "form-method".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn set_property_form_method(&self, form_method: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "form-method".to_glib_none().0, Value::from(form_method).to_glib_none().0);
        }
    }

    pub fn get_property_form_no_validate(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "form-no-validate".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    pub fn set_property_form_no_validate(&self, form_no_validate: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "form-no-validate".to_glib_none().0, Value::from(&form_no_validate).to_glib_none().0);
        }
    }

    pub fn get_property_form_target(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "form-target".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn set_property_form_target(&self, form_target: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "form-target".to_glib_none().0, Value::from(form_target).to_glib_none().0);
        }
    }

    pub fn get_property_incremental(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "incremental".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    pub fn set_property_incremental(&self, incremental: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "incremental".to_glib_none().0, Value::from(&incremental).to_glib_none().0);
        }
    }

    pub fn get_property_labels(&self) -> Option<DOMNodeList> {
        let mut value = Value::from(None::<&DOMNodeList>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "labels".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn get_property_list(&self) -> Option<DOMHTMLElement> {
        let mut value = Value::from(None::<&DOMHTMLElement>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "list".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn get_property_max(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "max".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn set_property_max(&self, max: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "max".to_glib_none().0, Value::from(max).to_glib_none().0);
        }
    }

    pub fn get_property_min(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "min".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn set_property_min(&self, min: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "min".to_glib_none().0, Value::from(min).to_glib_none().0);
        }
    }

    pub fn get_property_pattern(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "pattern".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn set_property_pattern(&self, pattern: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "pattern".to_glib_none().0, Value::from(pattern).to_glib_none().0);
        }
    }

    pub fn get_property_placeholder(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "placeholder".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn set_property_placeholder(&self, placeholder: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "placeholder".to_glib_none().0, Value::from(placeholder).to_glib_none().0);
        }
    }

    pub fn get_property_read_only(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "read-only".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    pub fn get_property_required(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "required".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    pub fn set_property_required(&self, required: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "required".to_glib_none().0, Value::from(&required).to_glib_none().0);
        }
    }

    pub fn get_property_step(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "step".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn set_property_step(&self, step: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "step".to_glib_none().0, Value::from(step).to_glib_none().0);
        }
    }

    pub fn get_property_type(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "type".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn set_property_type(&self, type_: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "type".to_glib_none().0, Value::from(type_).to_glib_none().0);
        }
    }

    pub fn get_property_validation_message(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "validation-message".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn get_property_value_as_number(&self) -> f64 {
        let mut value = Value::from(&0f64);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "value-as-number".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    pub fn set_property_value_as_number(&self, value_as_number: f64) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "value-as-number".to_glib_none().0, Value::from(&value_as_number).to_glib_none().0);
        }
    }
}
