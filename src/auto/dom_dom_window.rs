// This file was generated by gir (24767f3+) from gir-files (???)
// DO NOT EDIT

use DOMDocument;
use DOMElement;
use DOMEventTarget;
use DOMObject;
use ffi;
use glib::Value;
use glib::translate::*;
use gobject_ffi;

glib_wrapper! {
    pub struct DOMDOMWindow(Object<ffi::WebKitDOMDOMWindow>): DOMObject, DOMEventTarget;

    match fn {
        get_type => || ffi::webkit_dom_dom_window_get_type(),
    }
}

impl DOMDOMWindow {
    pub fn webkit_message_handlers_post_message(&self, handler: &str, message: &str) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_dom_window_webkit_message_handlers_post_message(self.to_glib_none().0, handler.to_glib_none().0, message.to_glib_none().0))
        }
    }

    pub fn get_property_closed(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "closed".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    pub fn get_property_default_status(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "default-status".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn set_property_default_status(&self, default_status: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "default-status".to_glib_none().0, Value::from(default_status).to_glib_none().0);
        }
    }

    pub fn get_property_device_pixel_ratio(&self) -> f64 {
        let mut value = Value::from(&0f64);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "device-pixel-ratio".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    pub fn get_property_document(&self) -> Option<DOMDocument> {
        let mut value = Value::from(None::<&DOMDocument>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "document".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn get_property_frame_element(&self) -> Option<DOMElement> {
        let mut value = Value::from(None::<&DOMElement>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "frame-element".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn get_property_frames(&self) -> Option<DOMDOMWindow> {
        let mut value = Value::from(None::<&DOMDOMWindow>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "frames".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn get_property_name(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "name".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn set_property_name(&self, name: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "name".to_glib_none().0, Value::from(name).to_glib_none().0);
        }
    }

    pub fn get_property_offscreen_buffering(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "offscreen-buffering".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    pub fn get_property_opener(&self) -> Option<DOMDOMWindow> {
        let mut value = Value::from(None::<&DOMDOMWindow>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "opener".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn get_property_parent(&self) -> Option<DOMDOMWindow> {
        let mut value = Value::from(None::<&DOMDOMWindow>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "parent".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn get_property_self(&self) -> Option<DOMDOMWindow> {
        let mut value = Value::from(None::<&DOMDOMWindow>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "self".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn get_property_status(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "status".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn set_property_status(&self, status: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "status".to_glib_none().0, Value::from(status).to_glib_none().0);
        }
    }

    pub fn get_property_top(&self) -> Option<DOMDOMWindow> {
        let mut value = Value::from(None::<&DOMDOMWindow>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "top".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn get_property_window(&self) -> Option<DOMDOMWindow> {
        let mut value = Value::from(None::<&DOMDOMWindow>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "window".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }
}
