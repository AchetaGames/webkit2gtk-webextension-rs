// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#[cfg(any(feature = "v2_2", feature = "dox"))]
use Frame;
#[cfg(any(feature = "v2_2", feature = "dox"))]
use WebPage;
use ffi;
#[cfg(any(feature = "v2_22", feature = "dox"))]
use glib::GString;
#[cfg(any(feature = "v2_2", feature = "dox"))]
use glib::object::Cast;
use glib::object::IsA;
#[cfg(any(feature = "v2_2", feature = "dox"))]
use glib::signal::SignalHandlerId;
#[cfg(any(feature = "v2_2", feature = "dox"))]
use glib::signal::connect_raw;
use glib::translate::*;
#[cfg(any(feature = "v2_2", feature = "dox"))]
use glib_ffi;
#[cfg(any(feature = "v2_2", feature = "dox"))]
use std::boxed::Box as Box_;
use std::fmt;
#[cfg(any(feature = "v2_2", feature = "dox"))]
use std::mem::transmute;

glib_wrapper! {
    pub struct ScriptWorld(Object<ffi::WebKitScriptWorld, ffi::WebKitScriptWorldClass, ScriptWorldClass>);

    match fn {
        get_type => || ffi::webkit_script_world_get_type(),
    }
}

impl ScriptWorld {
    #[cfg(any(feature = "v2_2", feature = "dox"))]
    pub fn new() -> ScriptWorld {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::webkit_script_world_new())
        }
    }

    #[cfg(any(feature = "v2_22", feature = "dox"))]
    pub fn new_with_name(name: &str) -> ScriptWorld {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::webkit_script_world_new_with_name(name.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    pub fn get_default() -> Option<ScriptWorld> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::webkit_script_world_get_default())
        }
    }
}

#[cfg(any(feature = "v2_2", feature = "dox"))]
impl Default for ScriptWorld {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_SCRIPT_WORLD: Option<&ScriptWorld> = None;

pub trait ScriptWorldExt: 'static {
    #[cfg(any(feature = "v2_22", feature = "dox"))]
    fn get_name(&self) -> Option<GString>;

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn connect_window_object_cleared<F: Fn(&Self, &WebPage, &Frame) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<ScriptWorld>> ScriptWorldExt for O {
    #[cfg(any(feature = "v2_22", feature = "dox"))]
    fn get_name(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::webkit_script_world_get_name(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn connect_window_object_cleared<F: Fn(&Self, &WebPage, &Frame) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"window-object-cleared\0".as_ptr() as *const _,
                Some(transmute(window_object_cleared_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

#[cfg(any(feature = "v2_2", feature = "dox"))]
unsafe extern "C" fn window_object_cleared_trampoline<P, F: Fn(&P, &WebPage, &Frame) + 'static>(this: *mut ffi::WebKitScriptWorld, page: *mut ffi::WebKitWebPage, frame: *mut ffi::WebKitFrame, f: glib_ffi::gpointer)
where P: IsA<ScriptWorld> {
    let f: &F = &*(f as *const F);
    f(&ScriptWorld::from_glib_borrow(this).unsafe_cast(), &from_glib_borrow(page), &from_glib_borrow(frame))
}

impl fmt::Display for ScriptWorld {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "ScriptWorld")
    }
}
