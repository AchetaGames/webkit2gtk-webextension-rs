// This file was generated by gir (06c1d5c+) from gir-files (???)
// DO NOT EDIT

use DOMEvent;
use DOMEventTarget;
use DOMNode;
use DOMObject;
use DOMUIEvent;
use ffi;
use glib::object::IsA;
use glib::translate::*;

glib_wrapper! {
    pub struct DOMMouseEvent(Object<ffi::WebKitDOMMouseEvent>): DOMUIEvent, DOMEvent, DOMObject;

    match fn {
        get_type => || ffi::webkit_dom_mouse_event_get_type(),
    }
}

pub trait DOMMouseEventExt {
    fn get_alt_key(&self) -> bool;

    //fn get_button(&self) -> /*Unimplemented*/Fundamental: UShort;

    fn get_client_x(&self) -> i64;

    fn get_client_y(&self) -> i64;

    fn get_ctrl_key(&self) -> bool;

    fn get_from_element(&self) -> Option<DOMNode>;

    fn get_meta_key(&self) -> bool;

    fn get_offset_x(&self) -> i64;

    fn get_offset_y(&self) -> i64;

    fn get_related_target(&self) -> Option<DOMEventTarget>;

    fn get_screen_x(&self) -> i64;

    fn get_screen_y(&self) -> i64;

    fn get_shift_key(&self) -> bool;

    fn get_to_element(&self) -> Option<DOMNode>;

    fn get_x(&self) -> i64;

    fn get_y(&self) -> i64;

    //fn init_mouse_event<T: IsA<DOMEventTarget>>(&self, type_: &str, canBubble: bool, cancelable: bool, view: &DOMDOMWindow, detail: i64, screenX: i64, screenY: i64, clientX: i64, clientY: i64, ctrlKey: bool, altKey: bool, shiftKey: bool, metaKey: bool, button: /*Unimplemented*/Fundamental: UShort, relatedTarget: &T);
}

impl<O: IsA<DOMMouseEvent>> DOMMouseEventExt for O {
    fn get_alt_key(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_mouse_event_get_alt_key(self.to_glib_none().0))
        }
    }

    //fn get_button(&self) -> /*Unimplemented*/Fundamental: UShort {
    //    unsafe { TODO: call ffi::webkit_dom_mouse_event_get_button() }
    //}

    fn get_client_x(&self) -> i64 {
        unsafe {
            ffi::webkit_dom_mouse_event_get_client_x(self.to_glib_none().0)
        }
    }

    fn get_client_y(&self) -> i64 {
        unsafe {
            ffi::webkit_dom_mouse_event_get_client_y(self.to_glib_none().0)
        }
    }

    fn get_ctrl_key(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_mouse_event_get_ctrl_key(self.to_glib_none().0))
        }
    }

    fn get_from_element(&self) -> Option<DOMNode> {
        unsafe {
            from_glib_none(ffi::webkit_dom_mouse_event_get_from_element(self.to_glib_none().0))
        }
    }

    fn get_meta_key(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_mouse_event_get_meta_key(self.to_glib_none().0))
        }
    }

    fn get_offset_x(&self) -> i64 {
        unsafe {
            ffi::webkit_dom_mouse_event_get_offset_x(self.to_glib_none().0)
        }
    }

    fn get_offset_y(&self) -> i64 {
        unsafe {
            ffi::webkit_dom_mouse_event_get_offset_y(self.to_glib_none().0)
        }
    }

    fn get_related_target(&self) -> Option<DOMEventTarget> {
        unsafe {
            from_glib_full(ffi::webkit_dom_mouse_event_get_related_target(self.to_glib_none().0))
        }
    }

    fn get_screen_x(&self) -> i64 {
        unsafe {
            ffi::webkit_dom_mouse_event_get_screen_x(self.to_glib_none().0)
        }
    }

    fn get_screen_y(&self) -> i64 {
        unsafe {
            ffi::webkit_dom_mouse_event_get_screen_y(self.to_glib_none().0)
        }
    }

    fn get_shift_key(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_mouse_event_get_shift_key(self.to_glib_none().0))
        }
    }

    fn get_to_element(&self) -> Option<DOMNode> {
        unsafe {
            from_glib_none(ffi::webkit_dom_mouse_event_get_to_element(self.to_glib_none().0))
        }
    }

    fn get_x(&self) -> i64 {
        unsafe {
            ffi::webkit_dom_mouse_event_get_x(self.to_glib_none().0)
        }
    }

    fn get_y(&self) -> i64 {
        unsafe {
            ffi::webkit_dom_mouse_event_get_y(self.to_glib_none().0)
        }
    }

    //fn init_mouse_event<T: IsA<DOMEventTarget>>(&self, type_: &str, canBubble: bool, cancelable: bool, view: &DOMDOMWindow, detail: i64, screenX: i64, screenY: i64, clientX: i64, clientY: i64, ctrlKey: bool, altKey: bool, shiftKey: bool, metaKey: bool, button: /*Unimplemented*/Fundamental: UShort, relatedTarget: &T) {
    //    unsafe { TODO: call ffi::webkit_dom_mouse_event_init_mouse_event() }
    //}
}
