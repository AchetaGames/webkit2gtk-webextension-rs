// This file was generated by gir (24767f3+) from gir-files (???)
// DO NOT EDIT

use DOMElement;
use DOMEventTarget;
use DOMHTMLCollection;
use DOMHTMLElement;
use DOMHTMLFormElement;
use DOMNode;
use DOMObject;
use ffi;
use glib::Value;
use glib::translate::*;
use gobject_ffi;

glib_wrapper! {
    pub struct DOMHTMLFieldSetElement(Object<ffi::WebKitDOMHTMLFieldSetElement>): DOMHTMLElement, DOMElement, DOMNode, DOMObject, DOMEventTarget;

    match fn {
        get_type => || ffi::webkit_dom_html_field_set_element_get_type(),
    }
}

impl DOMHTMLFieldSetElement {
    pub fn get_form(&self) -> Option<DOMHTMLFormElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_html_field_set_element_get_form(self.to_glib_none().0))
        }
    }

    pub fn get_property_disabled(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "disabled".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    pub fn set_property_disabled(&self, disabled: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "disabled".to_glib_none().0, Value::from(&disabled).to_glib_none().0);
        }
    }

    pub fn get_property_elements(&self) -> Option<DOMHTMLCollection> {
        let mut value = Value::from(None::<&DOMHTMLCollection>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "elements".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn get_property_name(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "name".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn set_property_name(&self, name: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "name".to_glib_none().0, Value::from(name).to_glib_none().0);
        }
    }

    pub fn get_property_type(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "type".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn get_property_validation_message(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "validation-message".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn get_property_will_validate(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "will-validate".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }
}
