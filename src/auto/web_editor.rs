// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#[cfg(any(feature = "v2_10", feature = "dox"))]
use WebPage;
use ffi;
#[cfg(any(feature = "v2_10", feature = "dox"))]
use glib::object::Cast;
use glib::object::IsA;
#[cfg(any(feature = "v2_10", feature = "dox"))]
use glib::signal::SignalHandlerId;
#[cfg(any(feature = "v2_10", feature = "dox"))]
use glib::signal::connect_raw;
use glib::translate::*;
#[cfg(any(feature = "v2_10", feature = "dox"))]
use glib_ffi;
#[cfg(any(feature = "v2_10", feature = "dox"))]
use std::boxed::Box as Box_;
use std::fmt;
#[cfg(any(feature = "v2_10", feature = "dox"))]
use std::mem::transmute;

glib_wrapper! {
    pub struct WebEditor(Object<ffi::WebKitWebEditor, ffi::WebKitWebEditorClass, WebEditorClass>);

    match fn {
        get_type => || ffi::webkit_web_editor_get_type(),
    }
}

pub const NONE_WEB_EDITOR: Option<&WebEditor> = None;

pub trait WebEditorExt: 'static {
    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn get_page(&self) -> Option<WebPage>;

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn connect_selection_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<WebEditor>> WebEditorExt for O {
    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn get_page(&self) -> Option<WebPage> {
        unsafe {
            from_glib_none(ffi::webkit_web_editor_get_page(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn connect_selection_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(self.as_ptr() as *mut _, b"selection-changed\0".as_ptr() as *const _,
                transmute(selection_changed_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

#[cfg(any(feature = "v2_10", feature = "dox"))]
unsafe extern "C" fn selection_changed_trampoline<P>(this: *mut ffi::WebKitWebEditor, f: glib_ffi::gpointer)
where P: IsA<WebEditor> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&WebEditor::from_glib_borrow(this).unsafe_cast())
}

impl fmt::Display for WebEditor {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "WebEditor")
    }
}
