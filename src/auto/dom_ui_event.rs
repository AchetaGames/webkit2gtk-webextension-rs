// This file was generated by gir (d9591be+) from gir-files (???)
// DO NOT EDIT

use DOMDOMWindow;
use DOMEvent;
use DOMObject;
use ffi;
use glib::object::IsA;
use glib::translate::*;

glib_wrapper! {
    pub struct DOMUIEvent(Object<ffi::WebKitDOMUIEvent>): DOMEvent, DOMObject;

    match fn {
        get_type => || ffi::webkit_dom_ui_event_get_type(),
    }
}

pub trait DOMUIEventExt {
    fn get_char_code(&self) -> i64;

    fn get_detail(&self) -> i64;

    fn get_key_code(&self) -> i64;

    fn get_layer_x(&self) -> i64;

    fn get_layer_y(&self) -> i64;

    fn get_page_x(&self) -> i64;

    fn get_page_y(&self) -> i64;

    fn get_view(&self) -> Option<DOMDOMWindow>;

    fn init_ui_event(&self, type_: &str, canBubble: bool, cancelable: bool, view: &DOMDOMWindow, detail: i64);
}

impl<O: IsA<DOMUIEvent>> DOMUIEventExt for O {
    fn get_char_code(&self) -> i64 {
        unsafe {
            ffi::webkit_dom_ui_event_get_char_code(self.to_glib_none().0)
        }
    }

    fn get_detail(&self) -> i64 {
        unsafe {
            ffi::webkit_dom_ui_event_get_detail(self.to_glib_none().0)
        }
    }

    fn get_key_code(&self) -> i64 {
        unsafe {
            ffi::webkit_dom_ui_event_get_key_code(self.to_glib_none().0)
        }
    }

    fn get_layer_x(&self) -> i64 {
        unsafe {
            ffi::webkit_dom_ui_event_get_layer_x(self.to_glib_none().0)
        }
    }

    fn get_layer_y(&self) -> i64 {
        unsafe {
            ffi::webkit_dom_ui_event_get_layer_y(self.to_glib_none().0)
        }
    }

    fn get_page_x(&self) -> i64 {
        unsafe {
            ffi::webkit_dom_ui_event_get_page_x(self.to_glib_none().0)
        }
    }

    fn get_page_y(&self) -> i64 {
        unsafe {
            ffi::webkit_dom_ui_event_get_page_y(self.to_glib_none().0)
        }
    }

    fn get_view(&self) -> Option<DOMDOMWindow> {
        unsafe {
            from_glib_full(ffi::webkit_dom_ui_event_get_view(self.to_glib_none().0))
        }
    }

    fn init_ui_event(&self, type_: &str, canBubble: bool, cancelable: bool, view: &DOMDOMWindow, detail: i64) {
        unsafe {
            ffi::webkit_dom_ui_event_init_ui_event(self.to_glib_none().0, type_.to_glib_none().0, canBubble.to_glib(), cancelable.to_glib(), view.to_glib_none().0, detail);
        }
    }
}
