// This file was generated by gir (074a1ca) from gir-files (???)
// DO NOT EDIT

use DOMCSSStyleDeclaration;
use DOMComment;
use DOMDOMImplementation;
use DOMDOMWindow;
use DOMDocumentFragment;
use DOMDocumentType;
use DOMElement;
use ffi;
use glib::object::IsA;
use glib::translate::*;

glib_wrapper! {
    pub struct DOMDocument(Object<ffi::WebKitDOMDocument>);

    match fn {
        get_type => || ffi::webkit_dom_document_get_type(),
    }
}

impl DOMDocument {
    //pub fn adopt_node<T: IsA</*Ignored*/DOMNode>>(&self, source: &T, error: /*Ignored*/Option<Error>) -> /*Ignored*/Option<DOMNode> {
    //    unsafe { TODO: call ffi::webkit_dom_document_adopt_node() }
    //}

    //pub fn create_attribute(&self, name: &str, error: /*Ignored*/Option<Error>) -> Option<DOMAttr> {
    //    unsafe { TODO: call ffi::webkit_dom_document_create_attribute() }
    //}

    //pub fn create_attribute_ns(&self, namespaceURI: Option<&str>, qualifiedName: &str, error: /*Ignored*/Option<Error>) -> Option<DOMAttr> {
    //    unsafe { TODO: call ffi::webkit_dom_document_create_attribute_ns() }
    //}

    //pub fn create_cdata_section(&self, data: &str, error: /*Ignored*/Option<Error>) -> /*Ignored*/Option<DOMCDATASection> {
    //    unsafe { TODO: call ffi::webkit_dom_document_create_cdata_section() }
    //}

    pub fn create_comment(&self, data: &str) -> Option<DOMComment> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_create_comment(self.to_glib_none().0, data.to_glib_none().0))
        }
    }

    pub fn create_css_style_declaration(&self) -> Option<DOMCSSStyleDeclaration> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_create_css_style_declaration(self.to_glib_none().0))
        }
    }

    pub fn create_document_fragment(&self) -> Option<DOMDocumentFragment> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_create_document_fragment(self.to_glib_none().0))
        }
    }

    //pub fn create_element(&self, tagName: &str, error: /*Ignored*/Option<Error>) -> Option<DOMElement> {
    //    unsafe { TODO: call ffi::webkit_dom_document_create_element() }
    //}

    //pub fn create_element_ns(&self, namespaceURI: Option<&str>, qualifiedName: &str, error: /*Ignored*/Option<Error>) -> Option<DOMElement> {
    //    unsafe { TODO: call ffi::webkit_dom_document_create_element_ns() }
    //}

    //pub fn create_entity_reference(&self, name: Option<&str>, error: /*Ignored*/Option<Error>) -> Option<DOMEntityReference> {
    //    unsafe { TODO: call ffi::webkit_dom_document_create_entity_reference() }
    //}

    //pub fn create_event(&self, eventType: &str, error: /*Ignored*/Option<Error>) -> Option<DOMEvent> {
    //    unsafe { TODO: call ffi::webkit_dom_document_create_event() }
    //}

    //pub fn create_expression<T: IsA</*Ignored*/DOMXPathNSResolver>>(&self, expression: &str, resolver: &T, error: /*Ignored*/Option<Error>) -> /*Ignored*/Option<DOMXPathExpression> {
    //    unsafe { TODO: call ffi::webkit_dom_document_create_expression() }
    //}

    //pub fn create_node_iterator<T: IsA</*Ignored*/DOMNode>, U: IsA</*Ignored*/DOMNodeFilter>>(&self, root: &T, whatToShow: /*Unimplemented*/Fundamental: ULong, filter: Option<&U>, expandEntityReferences: bool, error: /*Ignored*/Option<Error>) -> /*Ignored*/Option<DOMNodeIterator> {
    //    unsafe { TODO: call ffi::webkit_dom_document_create_node_iterator() }
    //}

    //pub fn create_ns_resolver<T: IsA</*Ignored*/DOMNode>>(&self, nodeResolver: &T) -> /*Ignored*/Option<DOMXPathNSResolver> {
    //    unsafe { TODO: call ffi::webkit_dom_document_create_ns_resolver() }
    //}

    //pub fn create_processing_instruction(&self, target: &str, data: &str, error: /*Ignored*/Option<Error>) -> /*Ignored*/Option<DOMProcessingInstruction> {
    //    unsafe { TODO: call ffi::webkit_dom_document_create_processing_instruction() }
    //}

    //pub fn create_range(&self) -> /*Ignored*/Option<DOMRange> {
    //    unsafe { TODO: call ffi::webkit_dom_document_create_range() }
    //}

    //pub fn create_text_node(&self, data: &str) -> /*Ignored*/Option<DOMText> {
    //    unsafe { TODO: call ffi::webkit_dom_document_create_text_node() }
    //}

    //pub fn create_tree_walker<T: IsA</*Ignored*/DOMNode>, U: IsA</*Ignored*/DOMNodeFilter>>(&self, root: &T, whatToShow: /*Unimplemented*/Fundamental: ULong, filter: Option<&U>, expandEntityReferences: bool, error: /*Ignored*/Option<Error>) -> /*Ignored*/Option<DOMTreeWalker> {
    //    unsafe { TODO: call ffi::webkit_dom_document_create_tree_walker() }
    //}

    //pub fn element_from_point(&self, x: /*Unimplemented*/Fundamental: Long, y: /*Unimplemented*/Fundamental: Long) -> Option<DOMElement> {
    //    unsafe { TODO: call ffi::webkit_dom_document_element_from_point() }
    //}

    //pub fn evaluate<T: IsA</*Ignored*/DOMNode>, U: IsA</*Ignored*/DOMXPathNSResolver>>(&self, expression: &str, contextNode: &T, resolver: Option<&U>, type_: /*Unimplemented*/Fundamental: UShort, inResult: /*Ignored*/Option<&DOMXPathResult>, error: /*Ignored*/Option<Error>) -> /*Ignored*/Option<DOMXPathResult> {
    //    unsafe { TODO: call ffi::webkit_dom_document_evaluate() }
    //}

    pub fn exec_command(&self, command: &str, userInterface: bool, value: &str) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_document_exec_command(self.to_glib_none().0, command.to_glib_none().0, userInterface.to_glib(), value.to_glib_none().0))
        }
    }

    pub fn get_active_element(&self) -> Option<DOMElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_get_active_element(self.to_glib_none().0))
        }
    }

    //pub fn get_anchors(&self) -> /*Ignored*/Option<DOMHTMLCollection> {
    //    unsafe { TODO: call ffi::webkit_dom_document_get_anchors() }
    //}

    //pub fn get_applets(&self) -> /*Ignored*/Option<DOMHTMLCollection> {
    //    unsafe { TODO: call ffi::webkit_dom_document_get_applets() }
    //}

    //pub fn get_body(&self) -> /*Ignored*/Option<DOMHTMLElement> {
    //    unsafe { TODO: call ffi::webkit_dom_document_get_body() }
    //}

    pub fn get_character_set(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_character_set(self.to_glib_none().0))
        }
    }

    pub fn get_charset(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_charset(self.to_glib_none().0))
        }
    }

    //pub fn get_cookie(&self, error: /*Ignored*/Option<Error>) -> Option<String> {
    //    unsafe { TODO: call ffi::webkit_dom_document_get_cookie() }
    //}

    pub fn get_default_charset(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_default_charset(self.to_glib_none().0))
        }
    }

    pub fn get_default_view(&self) -> Option<DOMDOMWindow> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_default_view(self.to_glib_none().0))
        }
    }

    pub fn get_doctype(&self) -> Option<DOMDocumentType> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_get_doctype(self.to_glib_none().0))
        }
    }

    pub fn get_document_element(&self) -> Option<DOMElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_get_document_element(self.to_glib_none().0))
        }
    }

    pub fn get_document_uri(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_document_uri(self.to_glib_none().0))
        }
    }

    pub fn get_domain(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_domain(self.to_glib_none().0))
        }
    }

    pub fn get_element_by_id(&self, elementId: &str) -> Option<DOMElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_document_get_element_by_id(self.to_glib_none().0, elementId.to_glib_none().0))
        }
    }

    //pub fn get_elements_by_class_name(&self, class_name: &str) -> /*Ignored*/Option<DOMNodeList> {
    //    unsafe { TODO: call ffi::webkit_dom_document_get_elements_by_class_name() }
    //}

    //#[cfg(feature = "v2_12")]
    //pub fn get_elements_by_class_name_as_html_collection(&self, classNames: &str) -> /*Ignored*/Option<DOMHTMLCollection> {
    //    unsafe { TODO: call ffi::webkit_dom_document_get_elements_by_class_name_as_html_collection() }
    //}

    //pub fn get_elements_by_name(&self, elementName: &str) -> /*Ignored*/Option<DOMNodeList> {
    //    unsafe { TODO: call ffi::webkit_dom_document_get_elements_by_name() }
    //}

    //pub fn get_elements_by_tag_name(&self, tag_name: &str) -> /*Ignored*/Option<DOMNodeList> {
    //    unsafe { TODO: call ffi::webkit_dom_document_get_elements_by_tag_name() }
    //}

    //#[cfg(feature = "v2_12")]
    //pub fn get_elements_by_tag_name_as_html_collection(&self, tagname: &str) -> /*Ignored*/Option<DOMHTMLCollection> {
    //    unsafe { TODO: call ffi::webkit_dom_document_get_elements_by_tag_name_as_html_collection() }
    //}

    //pub fn get_elements_by_tag_name_ns(&self, namespace_uri: &str, tag_name: &str) -> /*Ignored*/Option<DOMNodeList> {
    //    unsafe { TODO: call ffi::webkit_dom_document_get_elements_by_tag_name_ns() }
    //}

    //#[cfg(feature = "v2_12")]
    //pub fn get_elements_by_tag_name_ns_as_html_collection(&self, namespaceURI: &str, localName: &str) -> /*Ignored*/Option<DOMHTMLCollection> {
    //    unsafe { TODO: call ffi::webkit_dom_document_get_elements_by_tag_name_ns_as_html_collection() }
    //}

    //pub fn get_forms(&self) -> /*Ignored*/Option<DOMHTMLCollection> {
    //    unsafe { TODO: call ffi::webkit_dom_document_get_forms() }
    //}

    //pub fn get_head(&self) -> /*Ignored*/Option<DOMHTMLHeadElement> {
    //    unsafe { TODO: call ffi::webkit_dom_document_get_head() }
    //}

    //pub fn get_images(&self) -> /*Ignored*/Option<DOMHTMLCollection> {
    //    unsafe { TODO: call ffi::webkit_dom_document_get_images() }
    //}

    pub fn get_implementation(&self) -> Option<DOMDOMImplementation> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_implementation(self.to_glib_none().0))
        }
    }

    pub fn get_input_encoding(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_input_encoding(self.to_glib_none().0))
        }
    }

    pub fn get_last_modified(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_last_modified(self.to_glib_none().0))
        }
    }

    //pub fn get_links(&self) -> /*Ignored*/Option<DOMHTMLCollection> {
    //    unsafe { TODO: call ffi::webkit_dom_document_get_links() }
    //}

    pub fn get_override_style<T: IsA<DOMElement>>(&self, element: &T, pseudoElement: Option<&str>) -> Option<DOMCSSStyleDeclaration> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_override_style(self.to_glib_none().0, element.to_glib_none().0, pseudoElement.to_glib_none().0))
        }
    }

    pub fn get_preferred_stylesheet_set(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_preferred_stylesheet_set(self.to_glib_none().0))
        }
    }

    pub fn get_ready_state(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_ready_state(self.to_glib_none().0))
        }
    }

    pub fn get_referrer(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_referrer(self.to_glib_none().0))
        }
    }

    pub fn get_selected_stylesheet_set(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_selected_stylesheet_set(self.to_glib_none().0))
        }
    }

    //pub fn get_style_sheets(&self) -> /*Ignored*/Option<DOMStyleSheetList> {
    //    unsafe { TODO: call ffi::webkit_dom_document_get_style_sheets() }
    //}

    pub fn get_title(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_title(self.to_glib_none().0))
        }
    }

    pub fn get_url(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_url(self.to_glib_none().0))
        }
    }

    pub fn get_xml_encoding(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_xml_encoding(self.to_glib_none().0))
        }
    }

    pub fn get_xml_standalone(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_document_get_xml_standalone(self.to_glib_none().0))
        }
    }

    pub fn get_xml_version(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_get_xml_version(self.to_glib_none().0))
        }
    }

    pub fn has_focus(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_document_has_focus(self.to_glib_none().0))
        }
    }

    //pub fn import_node<T: IsA</*Ignored*/DOMNode>>(&self, importedNode: &T, deep: bool, error: /*Ignored*/Option<Error>) -> /*Ignored*/Option<DOMNode> {
    //    unsafe { TODO: call ffi::webkit_dom_document_import_node() }
    //}

    pub fn query_command_enabled(&self, command: &str) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_document_query_command_enabled(self.to_glib_none().0, command.to_glib_none().0))
        }
    }

    pub fn query_command_indeterm(&self, command: &str) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_document_query_command_indeterm(self.to_glib_none().0, command.to_glib_none().0))
        }
    }

    pub fn query_command_state(&self, command: &str) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_document_query_command_state(self.to_glib_none().0, command.to_glib_none().0))
        }
    }

    pub fn query_command_supported(&self, command: &str) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_document_query_command_supported(self.to_glib_none().0, command.to_glib_none().0))
        }
    }

    pub fn query_command_value(&self, command: &str) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_dom_document_query_command_value(self.to_glib_none().0, command.to_glib_none().0))
        }
    }

    //pub fn query_selector(&self, selectors: &str, error: /*Ignored*/Option<Error>) -> Option<DOMElement> {
    //    unsafe { TODO: call ffi::webkit_dom_document_query_selector() }
    //}

    //pub fn query_selector_all(&self, selectors: &str, error: /*Ignored*/Option<Error>) -> /*Ignored*/Option<DOMNodeList> {
    //    unsafe { TODO: call ffi::webkit_dom_document_query_selector_all() }
    //}

    //pub fn set_body<T: IsA</*Ignored*/DOMHTMLElement>>(&self, value: &T, error: /*Ignored*/Option<Error>) {
    //    unsafe { TODO: call ffi::webkit_dom_document_set_body() }
    //}

    pub fn set_charset(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_document_set_charset(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    //pub fn set_cookie(&self, value: &str, error: /*Ignored*/Option<Error>) {
    //    unsafe { TODO: call ffi::webkit_dom_document_set_cookie() }
    //}

    pub fn set_document_uri(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_document_set_document_uri(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    pub fn set_selected_stylesheet_set(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_document_set_selected_stylesheet_set(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    pub fn set_title(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_document_set_title(self.to_glib_none().0, value.to_glib_none().0);
        }
    }

    //pub fn set_xml_standalone(&self, value: bool, error: /*Ignored*/Option<Error>) {
    //    unsafe { TODO: call ffi::webkit_dom_document_set_xml_standalone() }
    //}

    //pub fn set_xml_version(&self, value: &str, error: /*Ignored*/Option<Error>) {
    //    unsafe { TODO: call ffi::webkit_dom_document_set_xml_version() }
    //}
}
